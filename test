max@max-DELL-18:~$ cd test
max@max-DELL-18:~/test$ cd l26
max@max-DELL-18:~/test/l26$ make
gcc -c main.c
gcc -c func.c
gcc -o program main.o func.o

max@max-DELL-18:~/test/l26$ cat makefile 
program: main.o func.o
	gcc -o program main.o func.o

main.o: main.c
	gcc -c main.c

func.o: func.c
	gcc -c func.c

clean:
	rm -f program *.o
max@max-DELL-18:~/test/l26$ cat modul.h
#ifndef STACK_H
#define STACK_H

// Структура стека
typedef struct {
    int *data;  // Массив данных
    int top;    // Индекс верхнего элемента
    int size;   // Размер стека
} Stack;

// Функции работы со стеком
Stack createStack(int size);
void push(Stack *stack, int item);
int pop(Stack *stack);
void mergeStacks(Stack *stack1, Stack *stack2);
void mergeSort(Stack *stack);
void printStack(Stack stack);

#endif
max@max-DELL-18:~/test/l26$ cat 
func.c    func.o    main.c    main.o    makefile  modul.h   program
max@max-DELL-18:~/test/l26$ cat 
func.c    func.o    main.c    main.o    makefile  modul.h   program
max@max-DELL-18:~/test/l26$ cat main.c
#include <stdio.h>
#include <stdlib.h>
#include "modul.h"

int main() {
    Stack stack1, stack2;
    int choice, item;
    
    // Инициализация стеков
    stack1 = createStack(100);
    stack2 = createStack(100);
    
    do {
        printf("\nМеню:\n");
        printf("1. Добавить элемент в стек\n");
        printf("2. Удалить последний добавленный элемент из стека\n");
        printf("3. Отсортировать стек алгоритмом сортировки слияния\n");
        printf("4. Слить два стека\n");
        printf("5. Вывести содержимое стека\n");
        printf("6. Выход\n");
        printf("Выберите действие (1-6): ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Выберите стек (1 или 2): ");
                scanf("%d", &item);
                if (item == 1) {
                    printf("Введите элемент для добавления в стек 1: ");
                    scanf("%d", &item);
                    push(&stack1, item);
                } else if (item == 2) {
                    printf("Введите элемент для добавления в стек 2: ");
                    scanf("%d", &item);
                    push(&stack2, item);
                } else {
                    printf("Неверный выбор стека.\n");
                }
                break;
                
            case 2:
                printf("Выберите стек (1 или 2): ");
                scanf("%d", &item);
                if (item == 1) {
                    item = pop(&stack1);
                    if (item != -1)
                        printf("Удаленный элемент из стека 1: %d\n", item);
                } else if (item == 2) {
                    item = pop(&stack2);
                    if (item != -1)
                        printf("Удаленный элемент из стека 2: %d\n", item);
                } else {
                    printf("Неверный выбор стека.\n");
                }
                break;
                
            case 3:
                printf("Выберите стек (1 или 2): ");
                scanf("%d", &item);
                if (item == 1) {
                    mergeSort(&stack1);
                    printf("Стек 1 отсортирован.\n");
                } else if (item == 2) {
                    mergeSort(&stack2);
                    printf("Стек 2 отсортирован.\n");
                } else {
                    printf("Неверный выбор стека.\n");
                }
                break;
                
            case 4:
                mergeStacks(&stack1, &stack2);
                printf("Стеки слиты.\n");
                break;
                
            case 5:
                printf("Выберите стек (1 или 2): ");
                scanf("%d", &item);
                if (item == 1)
                    printStack(stack1);
                else if (item == 2)
                    printStack(stack2);
                else
                    printf("Неверный выбор стека.\n");
                break;
                
            case 6:
                printf("Программа завершена.\n");
                break;
                
            default:
                printf("Неверный выбор.\n");
                break;
        }
    } while (choice != 6);
    
    return 0;
}
max@max-DELL-18:~/test/l26$ cat func.c
#include <stdio.h>
#include <stdlib.h>
#include "modul.h"

// Создание стека заданного размера
Stack createStack(int size) {
    Stack stack;
    stack.data = (int*)malloc(size * sizeof(int));
    stack.top = -1;
    stack.size = size;
    return stack;
}

// Добавление элемента в стек
void push(Stack *stack, int item) {
    if (stack->top == stack->size - 1) {
        printf("Стек полон. Невозможно добавить элемент.\n");
        return;
    }
    stack->data[++stack->top] = item;
}

// Удаление и возврат последнего добавленного элемента из стека
int pop(Stack *stack) {
    if (stack->top == -1) {
        printf("Стек пуст. Невозможно удалить элемент.\n");
        return -1;
    }
    return stack->data[stack->top--];
}

// Слияние двух стеков
void mergeStacks(Stack *stack1, Stack *stack2) {
    Stack tempStack = createStack(stack1->size + stack2->size);
    while (stack1->top != -1 && stack2->top != -1) {
        if (stack1->data[stack1->top] < stack2->data[stack2->top])
            push(&tempStack, pop(stack1));
        else
            push(&tempStack, pop(stack2));
    }
    while (stack1->top != -1)
        push(&tempStack, pop(stack1));
    while (stack2->top != -1)
        push(&tempStack, pop(stack2));
    
    while (tempStack.top != -1)
        push(stack1, pop(&tempStack));
}

// Алгоритм сортировки слиянием
void mergeSort(Stack *stack) {
    if (stack->top < 1)
        return;

    Stack leftStack = createStack(stack->size / 2);
    Stack rightStack = createStack(stack->size - stack->size / 2);

    while (stack->top >= 0) {
        if (leftStack.top < leftStack.size / 2)
            push(&leftStack, pop(stack));
        else
            push(&rightStack, pop(stack));
    }

    mergeSort(&leftStack);
    mergeSort(&rightStack);
    mergeStacks(&leftStack, &rightStack);

    while (leftStack.top >= 0)
        push(stack, pop(&leftStack));
}

// Вывод содержимого стека
void printStack(Stack stack) {
    printf("Содержимое стека: ");
    for (int i = stack.top; i >= 0; --i)
        printf("%d ", stack.data[i]);
    printf("\n");
}
max@max-DELL-18:~/test/l26$



max@max-DELL-18:~/test/l26$ ./program

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 1

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 2

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 3

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 10

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 5

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 6

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 27

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 9

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 7

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 5

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 1
Введите элемент для добавления в стек 1: 6

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 3

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 15

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 19

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 28

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 1
Выберите стек (1 или 2): 2
Введите элемент для добавления в стек 2: 11

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 5
Выберите стек (1 или 2): 1
Содержимое стека: 6 7 27 6 5 10 3 2 1 

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 5
Выберите стек (1 или 2): 2
Содержимое стека: 11 28 19 15 3 5 9 

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 3
Выберите стек (1 или 2): 2
Стек полон. Невозможно добавить элемент.
Стек полон. Невозможно добавить элемент.
Стек полон. Невозможно добавить элемент.
Стек 2 отсортирован.

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 5
Выберите стек (1 или 2): 2
Содержимое стека: 15 9 28 19 

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 4
Стеки слиты.

Меню:
1. Добавить элемент в стек
2. Удалить последний добавленный элемент из стека
3. Отсортировать стек алгоритмом сортировки слияния
4. Слить два стека
5. Вывести содержимое стека
6. Выход
Выберите действие (1-6): 6
Программа завершена.
max@max-DELL-18:~/test/l26$
